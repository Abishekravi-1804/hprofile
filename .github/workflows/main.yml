name: Hprofile Actions

on: 
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECS_SERVICE: vproapp-svc
  ECS_CLUSTER: vproapp1
  CONTAINER_NAME: hrpofile
  ECS_TASK_DEFINITION: /aws-files/taskdeffile.json

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
        
      - name: SonarQube Quality Gate check 
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master 
        with:
          pollingTimeoutSec: 600 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  BUILD_AND_PUBLISH:
    needs: Testing 
    runs-on: ubuntu-latest 
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4
     
      - name: Update application.properties file 
        run: |
          sed -i "s/^jdbc\.username=.*/jdbc.username=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc\.password=.*/jdbc.password=${{ secrets.RDS_PASSWORD }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/hprofile:${{ github.sha }}
        
  DEPLOY:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest 
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.DOCKER_USERNAME }}/hprofile:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
