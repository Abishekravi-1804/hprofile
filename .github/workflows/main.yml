name: Hprofile Actions

on: 
  workflow_dispatch:

jobs:
  Testing:
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
        
      - name: SonarQube Quality Gate check 
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master 
        with:
          pollingTimeoutSec: 600 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}

  BUILD_AND_PUBLISH:
    needs: Testing 
    runs-on: ubuntu-latest 
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4
     
      - name: Update application.properties file 
        run: |
          sed -i "s/^jdbc\.username=.*/jdbc.username=${{ secrets.DOCKER_USERNAME }}/" src/main/resources/application.properties
          sed -i "s/^jdbc\.password=.*/jdbc.password=${{ secrets.DOCKER_PASSWORD }}/" src/main/resources/application.properties


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/hprofile:latest 

  DEPLOY :
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest 
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
           aws-region: ap-south-1
       
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
      
          script_stop: true
          script: |
            # Set variables
            APP_NAME="hprofile-app"
            DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/hprofile:latest"
            
            echo "üöÄ Starting deployment of $DOCKER_IMAGE"
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            docker stop $APP_NAME || true
            docker rm $APP_NAME || true
            
            # Clean up old images to save space on t2.micro
            echo "üßπ Cleaning up old images..."
            docker image prune -af
            
            # Pull the latest image from Docker Hub
            echo "üì• Pulling latest image from Docker Hub..."
            docker pull $DOCKER_IMAGE
            
            # Run new container with environment variables
            echo "üèÉ Starting new container..."
            docker run -d \
              --name $APP_NAME \
              --restart unless-stopped \
              -p 8080:8080 \
              -e RDS_ENDPOINT="${{ secrets.RDS_ENDPOINT }}" \
              -e RDS_USERNAME="${{ secrets.RDS_USER }}" \
              -e RDS_PASSWORD="${{ secrets.RDS_PASSWORD }}" \
              -e RDS_DATABASE="${{ secrets.RDS_DATABASE }}" \
              -e JAVA_OPTS="-Xmx256m -Xms128m -XX:+UseG1GC" \
              --memory=512m \
              --cpus=0.5 \
              $DOCKER_IMAGE
            
            echo "‚úÖ Container started successfully!"

         